#!/bin/bash

# Script to fetch Pokémon data in parallel using background processes, save to JSON files, and handle rate-limiting

# Define constants
BASE_API_URL="https://pokeapi.co/api/v2/pokemon"
ERROR_FILE="errors.txt"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
MAX_CONCURRENT=2

# Check if curl is installed
if ! command -v curl &> /dev/null; then
    echo "$TIMESTAMP: Error: curl is not installed." >> "$ERROR_FILE"
    exit 1
fi

# Function to fetch data for a single Pokémon
fetch_pokemon() {
    local pokemon=$1
    local OUTPUT_FILE="${pokemon}.json"
    local API_URL="${BASE_API_URL}/${pokemon}"
    local TEMP_FILE="${pokemon}.tmp"

    # Make API request and capture response and HTTP status code
    response=$(curl -s -L -w "%{http_code}" -o "$TEMP_FILE" "$API_URL" 2>&1)
    http_status=${response##* }
    curl_exit_code=$?

    # Check for curl errors
    if [ $curl_exit_code -ne 0 ]; then
        echo "$TIMESTAMP: Error: curl failed for $pokemon with exit code $curl_exit_code" >> "$ERROR_FILE"
        rm -f "$TEMP_FILE"
        return 1
    fi

    # Check HTTP status code
    if [ "$http_status" -ne 200 ]; then
        echo "$TIMESTAMP: Error: API request for $pokemon failed with HTTP status $http_status" >> "$ERROR_FILE"
        rm -f "$TEMP_FILE"
        return 1
    fi

    # Move temp file to final output
    mv "$TEMP_FILE" "$OUTPUT_FILE"
    echo "Successfully fetched data for $pokemon and saved to $OUTPUT_FILE"
    return 0
}

# Array to store PIDs of background processes
declare -a pids
count=0

# Loop through each Pokémon
for pokemon in "${POKEMON_LIST[@]}"; do
    # Run fetch in background
    fetch_pokemon "$pokemon" &
    pids[$count]=$!
    count=$((count + 1))

    # Limit concurrent processes
    if [ $count -ge $MAX_CONCURRENT ]; then
        # Wait for current batch to complete
        for pid in "${pids[@]}"; do
            wait $pid
        done
        # Reset for next batch
        pids=()
        count=0
        # Small delay to respect API rate limits
        sleep 0.5
    fi
done

# Wait for remaining processes
for pid in "${pids[@]}"; do
    wait $pid
done